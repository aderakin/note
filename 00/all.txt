"Template" - "zztemp"

#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using ld = long double;
#define int long long
using pii = pair<int, int>;

#define all(v) v.begin(), v.end()
#define rall(v) v.rbegin(), v.rend()
#define create_unique(vec) sort(all(vec)); vec.resize(unique(all(vec))-vec.begin());
#define REP(i, n)  for (int i = 1, _n = (n); i <= _n; i++)
#define REPD(i, n)  for (int i = (n); i >= 1; i--)
#define FOR(i, a, b)  for (int i = (a), _b = (b); i <= _b; i++)
#define FORD(i, b, a)  for (int i = (b), _a = (a); i >= _a; i--)

template<class T> bool ckmin(T& a, const T& b) { return b < a ? a = b, 1 : 0; }
template<class T> bool ckmax(T& a, const T& b) { return b > a ? a = b, 1 : 0; }

#define endl '\n'
#define db(val) "[" #val " = " << (val) << "] "
#ifdef LOCAL_DEBUG  
#   define clog cerr 
#else
#   define clog if (0) cerr
#endif

void setIO(string name = ""){
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    if (!name.empty()) {
        if (fopen((name + ".inp").c_str(), "r")) { 
            freopen((name + ".inp").c_str(), "r", stdin);
            freopen((name + ".out").c_str(), "w", stdout);
        }
    }

}

void solve() {

}

signed main() {
    setIO("");
    int t = 1;
    cin >> t;
    while (t--) solve();
}

"Judge" - "zzcheck"

#include <bits/stdc++.h>
using namespace std;

#define REP(i, n)  for (int i = 1, _n = (n); i <= _n; i++)

string TASK = "a";
int ntest = 15;

int main () {
    ios_base::sync_with_stdio(NULL);
    cin.tie(NULL);
    system ("cls");
    
    REP(itest, ntest) {
        system ((TASK + "_gen.exe").c_str());
        system ((TASK + ".exe").c_str());
        system ((TASK + "_trau.exe").c_str());
        if (system(("fc " + TASK + ".ans " + TASK + ".out").c_str()) != 0) {
            system ("color 4");
            cout << "Wrong answer on test: " << itest;
            return 0;
        }
    }
    system ("color 2");
    cout << endl << ntest << " passed";
    return 0;
}

"Gen" - "zzgen"
gen: 
#include <bits/stdc++.h>
#include <unistd.h>
using namespace std;
#define ll long long
#define For(x, a, b) for(int (x)=(int)a; (x)<=(int)b; ++(x))
#define fr first
#define sc second
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
#define rn(_x,_y) (uniform_int_distribution<long long>(_x,_y)(rng))

vector<int> code;
vector<pair<int, int>> edges;

// sinh cay, n la so dinh, sinh ra n-1 canh o vector edges.
void tree_gen(int n) {
    code.clear();
    edges.clear();
    For(i,1,n-2) code.emplace_back(rn(0,n-1));
    vector<int> degree(n, 1);
    for (int i : code)
        ++degree[i];

    int ptr = 0;
    while (degree[ptr] != 1) ++ptr;
    int leaf = ptr;
    for (int v : code) {
        edges.emplace_back(leaf+1, v+1);
        if (--degree[v] == 1 && v < ptr) {
            leaf = v;
        } else {
            ++ptr;
            while (degree[ptr] != 1) ++ptr;
            leaf = ptr;
        }
    }
    edges.emplace_back(leaf+1, n);
}

map<pair<int, int>, bool> graph_gen_mp;

// n dinh m canh, bat buoc lien thong hay khong?
void graph_gen(int n, int m, bool lt) {
    edges.clear();
    graph_gen_mp.clear();
    int i = 0, ret = 0;
    if(m < n-1 && lt) {
        cerr << "ERROR: Too few edges to make a connected graph.\n";
        return;
    }
    if(m > (1LL*n*(n-1))/2LL) {
        cerr << "ERROR: Too many edges to make a graph.\n";
        return;
    }
    if(m > ((1LL*n*(n-1))/5LL)*2LL) {
        cerr << "WARNING: The ratio between the edges and the vertices is too high.\nIt may takes longer time to generate a graph.\n";
    }
    if(lt) {
        tree_gen(n);
        for(pair<int, int> x: edges) {
            graph_gen_mp[x] = 1;
        }
        i = n-1;
    }
    while (i < m) {
        edges.push_back({rn(1,n), rn(1,n)});
        if (edges[i].fr == edges[i].sc || graph_gen_mp[edges[i]] || graph_gen_mp[{edges[i].sc, edges[i].fr}]) {
            edges.pop_back();
            continue;
        }
        graph_gen_mp[edges[i]] = 1;
        ++i;
    }
}

"Dynamic Lazy SegTree" - "zzdynseg"

const int SZ = 1e9 + 10;
struct DynamicLazySegTree {
    using S = int;
    using F = int;
 
    S op(S l, S r) { return S{max(l, r)}; }
 
    static S e() { return S{0}; }
 
    S mapping(F f, S s) { return S{f+s}; }
 
    F composition(F f, F g) { return F{f+g}; }
 
    static F lz_e() { return F{0}; }
 
	struct Node {
        S val;
        F lz;
		Node *l, *r;
 
		Node() : l(NULL), r(NULL) {
            val = e();
            lz = lz_e();
        }
	};
 
	Node *root = new Node();
 
	void expand(Node *me) {
		if(!me->l) me->l = new Node();
		if(!me->r) me->r = new Node();
	}
 
    void all_apply(Node *me, F f) {
        me->val = mapping(f, me->val);
        me->lz = composition(f, me->lz);
    }
 
    void push(Node *me) {
        all_apply(me->l, me->lz);
        all_apply(me->r, me->lz);
        me->lz = lz_e();
    }
 
    void update(Node *me, int u, int v, F f, int lx, int rx) {
        if (u > rx || v < lx) return;
        if (u <= lx && v >= rx) {
            all_apply(me, f);
            return;
        }
 
        expand(me);
        push(me);
 
		int mid = (lx + rx) >> 1; 
        update(me->l, u, v, f, lx, mid);
        update(me->r, u, v, f, mid+1, rx);
 
        me->val = e();
        me->val = op(me->val, me->l->val);
        me->val = op(me->val, me->r->val);
    }
 
    S query(Node *me, int u, int v, int lx, int rx) { 
        if (u > rx || v < lx) return e();
		if (u <= lx && v >= rx) return me->val;
 
        expand(me); 
        push(me);
 
        S res = e();
		int mid = (lx + rx) >> 1; 
        res = op(res, query(me->l, u, v, lx, mid));
        res = op(res, query(me->r, u, v, mid+1, rx));
 
        return res;
	}	
 
    void update(int u, int v, F f) {
        update(root, u, v, f, 0, SZ);
    }
 
    S query(int u, int v) {
        return query(root, u, v, 0, SZ);
    }
} tree;

"SegTree" - "zzseg"
template<
    class S, 
    S (*op) (S, S),
    S (*e) ()
> struct SegTree {
	int _n;
	vector<S> st;
	
	SegTree() {}
	SegTree(int _n) : _n(_n), st(_n*4+1, e()) {}

	void update(int p, S x, int id, int lx, int rx) {
		if (p > rx || p < lx) return;
		if (lx == rx) {
			st[id] = x;
			return;
		}

		int mid = (lx + rx) >> 1;
		update(p, x, id*2, lx, mid);
		update(p, x, id*2 + 1, mid+1, rx);

		st[id] = op(st[id*2], st[id*2 + 1]);
	}

	S query(int u, int v, int id, int lx, int rx) {
		if (u > rx || v < lx) return e();
		if (u <= lx && v >= rx) return st[id];

		int mid = (lx + rx) >> 1;
		return op(query(u, v, id*2, lx, mid), query(u, v, id*2 + 1, mid+1, rx));
	}

	void update(int p, S x) { 
		update(p, x, 1, 0, _n); 
	}

	S query(int u, int v) {
		return query(u, v, 1, 0, _n); 
	}
};

using S = int;
S op(S l, S r) { return l + r; }
S e() { return 0; }


"BIT 2D" - "zzbit2d"
const int SZ = 1000 + 10;
struct BIT2D {
    int bit[SZ][SZ];

    int query(int x, int y) {
        int ans = 0;
        for (int i = x+1; i > 0; i -= -i & i) {
            for (int j = y+1; j > 0; j -= -j & j) {
                ans += bit[i][j];
            }
        }
        return ans;
    }

    void __update(int x, int y, int val) {
        for (int i = x+1; i < SZ; i += -i & i) {
            for (int j = y+1; j < SZ; j += -j & j) {
                bit[i][j] += val;
            }
        }
    }

    void update(int x1, int y1, int x2, int y2, int val) {
        __update(x1, y1, val);
        __update(x1, y2+1, -val);
        __update(x2+1, y1, -val);
        __update(x2+1, y2+1, val);
    }
} bit;

"Lichao Seg" - "zzlichao"
const int SZ = 1e9 + 10;
struct LichaoTree {
	struct Node {
		point line;
		Node *l, *r;

		Node() : line(point(0LL, inf)), l(NULL), r(NULL) {}
	};

	Node *root = new Node();

	void expand(Node *me) {
		if(!me->l) me->l = new Node();
		if(!me->r) me->r = new Node();
	}

	void add_line(Node *me, int lx, int rx, point nw) {
		int mid = (lx + rx) >> 1;
		bool c1 = f(nw, lx) < f(me->line, lx);
		bool c2 = f(nw, mid) < f(me->line, mid);
		if(c2) swap(me->line, nw);
		if(lx == rx) return;

		expand(me);
		if(c1 != c2) add_line(me->l, lx, mid, nw);
		else add_line(me->r, mid+1, rx, nw);
	}

	ll query(Node *me, int lx, int rx, int x) {
		int mid = (lx + rx) >> 1;
		if(lx == rx) return f(me->line, x);

		expand(me);
		if(x < mid) return min(f(me->line, x), query(me->l, lx, mid, x));
		else return min(f(me->line, x), query(me->r, mid+1, rx, x));
	}

	void add_line(point nw) { add_line(root, 0, SZ, nw); }
	ll query(int x) { return query(root, 0, SZ, x); } 
} lt;

"Merge Sort Tree" - "zzmerge"
struct MergeSortTree {
	int _n;
	vector<vector<int>> st;
	
	MergeSortTree() {}
	MergeSortTree(int _n) : _n(_n), st(_n*4+1, vector<int>()) {}

	void init(int __n) {
		_n = __n;
		st.resize(_n*4+1);
	}

	void build(const vector<int> &x, int id, int lx, int rx) {
		if (lx == rx) {
			st[id].push_back(x[lx]);
			return;
		}

		int mid = (lx + rx) >> 1;
		build(x, id*2, lx, mid);
		build(x, id*2 + 1, mid+1, rx);

        st[id].resize(st[id*2].size() + st[id*2+1].size());
		merge(all(st[id*2]), all(st[id*2 + 1]), st[id].begin());
	}

	int query(int u, int v, int k, int id, int lx, int rx) {
		if (u > rx || v < lx) return 0;
		if (u <= lx && v >= rx) {
            int res = upper_bound(all(st[id]), k) - st[id].begin();
            return res;
        }

		int mid = (lx + rx) >> 1;
		return query(u, v, k, id*2, lx, mid) + query(u, v, k, id*2 + 1, mid+1, rx);
	}

    int query(int u, int v, int k) {
        return query(u, v, k, 1, 1, _n);
    }
};

"SegTree Beats" - "zzbeat"

const int MAXN = 1e6 + 1;

struct Node {
    int max1;  // max value
    int max2;  // 2nd max value (must be different from max1)
    int cnt_max;  // how many indices have value == max1
    int sum;
    int lazy;

    Node() {}
    Node(int val) {  // initialize with a single number.
        max1 = val;
        max2 = -1;  // Note that values are in [0, 2^31), so -1 works here.
        cnt_max = 1;
        sum = val;
        lazy = -1;  // Note that values are in [0, 2^31), so -1 works here.
    }

    void setMin(int val) {  // for each i, set a[i] = min(a[i], val)
        assert(val > max2);

        if (max1 <= val) return;

        // Sample: 1 3 5 8 8 --> 1 3 5 6 6
        sum -= (max1 - val) * cnt_max;
        lazy = val;
        max1 = val;
    }
} it[4*MAXN + 10];

Node operator + (const Node& a, const Node& b) {
    Node res;
    res.max1 = max(a.max1, b.max1);
    res.max2 = max(a.max2, b.max2);
    
    if (a.max1 != res.max1) res.max2 = max(res.max2, a.max1);
    if (b.max1 != res.max1) res.max2 = max(res.max2, b.max1);

    res.cnt_max = 0;
    if (a.max1 == res.max1) res.cnt_max += a.cnt_max;
    if (b.max1 == res.max1) res.cnt_max += b.cnt_max;

    res.sum = a.sum + b.sum;
    res.lazy = -1;
    return res;
}

void down(int i) {
    if (it[i].lazy < 0) return;

    it[i*2].setMin(it[i].lazy);
    it[i*2+1].setMin(it[i].lazy);

    it[i].lazy = -1;
}

void build(int *arr, int i, int l, int r) {
    if (l == r) {
        it[i] = Node(arr[l]);
        return;
    }
    int mid = (l + r) / 2;
    build(arr, i*2, l, mid);
    build(arr, i*2 + 1, mid + 1, r);

    it[i] = it[i*2] + it[i*2 + 1];
}

void setMin(int i, int l, int r, int u, int v, int x) {
    if (v < l || r < u) return;
    if (it[i].max1 <= x) return;
    // now max1 > x

    if (u <= l && r <= v && it[i].max2 < x) {
        it[i].setMin(x);
        return;
    }

    down(i);
    int mid = (l + r) / 2;
    setMin(i*2, l, mid, u, v, x);
    setMin(i*2 + 1, mid+1, r, u, v, x);
    it[i] = it[i*2] + it[i*2 + 1];
}

int getMax(int i, int l, int r, int u, int v) {
    if (v < l || r < u) return -1;
    if (u <= l && r <= v) return it[i].max1;

    down(i);
    int mid = (l + r) / 2;
    return max(getMax(i*2, l, mid, u, v),
            getMax(i*2+1, mid+1, r, u, v));
}

int getSum(int i, int l, int r, int u, int v) {
    if (v < l || r < u) return 0;
    if (u <= l && r <= v) return it[i].sum;

    down(i);
    int mid = (l + r) / 2;
    return getSum(i*2, l, mid, u, v) + getSum(i*2+1, mid+1, r, u, v);
}

"Geometry" - "zzgeo"

template <class T> int sgn(T x) { return (x > 0) - (x < 0); }
template<class T>
struct Point {
	typedef Point P;
	T x, y;
	explicit Point(T x=0, T y=0) : x(x), y(y) {}
	bool operator<(P p) const { return tie(x,y) < tie(p.x,p.y); }
	bool operator==(P p) const { return tie(x,y)==tie(p.x,p.y); }
	P operator+(P p) const { return P(x+p.x, y+p.y); }
	P operator-(P p) const { return P(x-p.x, y-p.y); }
	P operator*(T d) const { return P(x*d, y*d); }
	P operator/(T d) const { return P(x/d, y/d); }
	T dot(P p) const { return x*p.x + y*p.y; }
	T cross(P p) const { return x*p.y - y*p.x; }
	T cross(P a, P b) const { return (a-*this).cross(b-*this); }
	T dist2() const { return x*x + y*y; }
	double dist() const { return sqrt((double)dist2()); }
	// angle to x-axis in interval [-pi, pi]
	double angle() const { return atan2(y, x); }
	P unit() const { return *this/dist(); } // makes dist()=1
	P perp() const { return P(-y, x); } // rotates +90 degrees
	P normal() const { return perp().unit(); }
	// returns point rotated 'a' radians ccw around the origin
	P rotate(double a) const {
		return P(x*cos(a)-y*sin(a),x*sin(a)+y*cos(a)); }
	friend ostream& operator<<(ostream& os, P p) {
		return os << "(" << p.x << "," << p.y << ")"; }
    friend istream &operator >> (istream &inp, P &p) {
        inp >> p.x >> p.y;
        return inp;
    }
};

typedef Point<ll> P;

int sideOf(P s, P e, P p) { return sgn(s.cross(e, p)); }

bool onSegment(P s, P e, P p) {
	return p.cross(s, e) == 0 && (s - p).dot(e - p) <= 0;
}

vector<P> segInter(P a, P b, P c, P d) {
	auto oa = c.cross(d, a), ob = c.cross(d, b),
	     oc = a.cross(b, c), od = a.cross(b, d);
	// Checks if intersection is single non-endpoint point.
	if (sgn(oa) * sgn(ob) < 0 && sgn(oc) * sgn(od) < 0)
		return {(a * ob - b * oa) / (ob - oa)};
	set<P> s;
	if (onSegment(c, d, a)) s.insert(a);
	if (onSegment(c, d, b)) s.insert(b);
	if (onSegment(a, b, c)) s.insert(c);
	if (onSegment(a, b, d)) s.insert(d);
	return {all(s)};
}

vector<P> convexHull(vector<P> pts) {
	if (pts.size() <= 1) return pts;
	sort(all(pts));
	vector<P> h(pts.size()+1);
	int s = 0, t = 0;
	for (int it = 2; it--; s = --t, reverse(all(pts)))
		for (P p : pts) {
			while (t >= s + 2 && h[t-2].cross(h[t-1], p) <= 0) t--;
			h[t++] = p;
		}
	return {h.begin(), h.begin() + t - (t == 2 && h[0] == h[1])};
}

bool inHull(const vector<P>& l, P p, bool strict = true) {
	int a = 1, b = sz(l) - 1, r = !strict;
	if (sz(l) < 3) return r && onSegment(l[0], l.back(), p);
	if (sideOf(l[0], l[a], l[b]) > 0) swap(a, b);
	if (sideOf(l[0], l[a], p) >= r || sideOf(l[0], l[b], p)<= -r)
		return false;
	while (abs(a - b) > 1) {
		int c = (a + b) >> 1;
		(sideOf(l[0], l[c], p) > 0 ? b : a) = c;
	}   
	return sgn(l[a].cross(l[b], p)) < r;
}

pair<P, P> closest(vector<P> v) {
	assert(sz(v) > 1);
	set<P> S;
	sort(all(v), [](P a, P b) { return a.y < b.y; });
	pair<ll, pair<P, P>> ret{LLONG_MAX, {P(), P()}};
	int j = 0;
	for (P p : v) {
		P d{1 + (ll)sqrt(ret.first), 0};
		while (v[j].y <= p.y - d.x) S.erase(v[j++]);
		auto lo = S.lower_bound(p - d), hi = S.upper_bound(p + d);
		for (; lo != hi; ++lo)
			ret = min(ret, {(*lo - p).dist2(), {*lo, p}});
		S.insert(p);
	}
	return ret.second;
}

"SCC" - "zzscc"

const int MAXN = 1e5 + 10;

int n, m;
vector<int> g[MAXN];
int tin[MAXN], low[MAXN];

bool vis[MAXN];

vector<vector<int>> scc;

int timer = 0;

vector<int> order;
void dfs(int u) {
    timer++;
    tin[u] = low[u] = timer;
    vis[u] = 1;
    order.push_back(u);

    for (int v : g[u]) {
        if (tin[v] == -1) dfs(v);

        if (vis[v]) { 
            low[u] = min(low[u], low[v]);
        } 
    }

    if (low[u] == tin[u]) {
        scc.push_back(vector<int>());
        while (1) {
            int v = order.back(); order.pop_back(); vis[v] = 0;
            scc.back().push_back(v);

            if (u == v) break;
        }
    }
}

void tarjan() {
    memset(tin, -1, sizeof tin);
    for (int i = 1; i <= n; i++) if (tin[i] == -1) dfs(i);

    cout << scc.size() << '\n';

    for (auto &v : scc) sort(all(v));
    sort(all(scc), [] (vector<int> &x, vector<int> &y) {
        if (x.size() == y.size()) return x < y;
        return x.size() < y.size(); 
    });

    for (auto &v : scc) {
        cout << v.size() << '\n';
        for (int i : v) cout << i << " ";
        cout << '\n';
    } 
}

void solve() {
    cin >> n >> m;
    for (int i = 0; i < m; i++) {
        int u, v; cin >> u >> v;
        g[u].push_back(v);
    }

    tarjan();
}

"Diameter" - "zzdia"

vector<int> tree_diameter(const vector<vector<int>>& adj) {
    int n = adj.size();
    vector<ll> dist(n+1);
    vector<int> parent(n+1);

    function<void(int, int, ll)> dfs = [&] (int u, int fu, ll cur_dist) {
        dist[u] = cur_dist;
        parent[u] = fu;
        for (auto v : adj[u]) if (v != fu) {
            dfs(v, u, cur_dist + 1);
        }
    };
    dfs(1, -1, 0);
    // r = furthest node from root
    int r = max_element(all(dist)) - dist.begin();
    dfs(r, -1, 0);
    // r->s = longest path
    int s = max_element(all(dist)) - dist.begin();

    vector<int> path;
    for (int x = s; x >= 0; x = parent[x]) path.push_back(x);

    return path;
}

"DSU" - "zzdsu"
struct DSU {
    vector<int> root, sz;
    int connected;

    DSU(int _n) : root(_n+1), sz(_n+1) {
        connected = _n;
        for (int i = 0; i <= _n; i++) {
            sz[i] = 1;
            root[i] = i;        
        }
    }

    int get_root(int u) {
        if (u == root[u]) return u;
        return root[u] = get_root(root[u]);
    }

    bool unite(int u, int v) {
        u = get_root(u); v = get_root(v);
        if (u == v) return false;

        if (sz[u] < sz[v]) swap(u, v);
        connected--;
        sz[u] += sz[v];
        root[v] = u;
        return true;
    }

    bool same_component(int u, int v) {
        return get_root(u) == get_root(v);
    }

    int get_size(int u) {
        return sz[get_root(u)];
    }
};

"HLD" - "zzhld"

const int MAXN = 2e5 + 10;
const bool VALS_IN_EDGES = false;

int n; vector<int> g[MAXN];
int par[MAXN], nxt[MAXN], depth[MAXN], sz[MAXN], dfs_number;
int in[MAXN]; 

void add_edge(int u, int v) { g[u].push_back(v), g[v].push_back(u); }

void dfs_sz(int u) { 
    sz[u] = 1; 
    for (auto &v : g[u]) {
        par[v] = u; depth[v] = depth[u]+1;
        g[v].erase(find(all(g[v]), u)); /// remove parent 
        dfs_sz(v); sz[u] += sz[v];
        if (sz[v] > sz[g[u][0]]) swap(v, g[u][0]);
    }
}

void dfs_hld(int u) {
    in[u] = ++dfs_number;
    for (auto &v : g[u]) {
        nxt[v] = (v == g[u][0] ? nxt[u] : v);
        dfs_hld(v);
    }
}

int lca(int u, int v) {
    for (; nxt[u] != nxt[v]; v = par[nxt[v]]) {
        if (depth[nxt[u]] > depth[nxt[v]]) swap(u, v);
    }

    return depth[u] < depth[v] ? u : v;
}

int dist(int u, int v) { return depth[u]+depth[v]-2*depth[lca(u,v)]; }

using S = int;
S op(S l, S r) { return l + r; }
S e() { return 0; }

SegTree<S, op, e> tree(MAXN);

template <class B>
void processPath(int u, int v, B op_hld) {
    for (; nxt[u] != nxt[v]; v = par[nxt[v]]) {
        if (depth[nxt[u]] > depth[nxt[v]]) swap(u, v);
        op_hld(in[nxt[v]], in[v]); 
    }

    if (depth[u] > depth[v]) swap(u, v);
    op_hld(in[u]+VALS_IN_EDGES, in[v]); 
}

ll queryPath(int u, int v) { 
    ll res = e(); 
    processPath(u, v, [&res] (int l, int r) { 
        res = op(res, tree.query(l, r)); 
    });
    return res; 
}

void updateNode(int u, int x) { tree.update(in[u], x); }

// void updatePath(int u, int v, int x) { 
//     processPath(u, v, [&x] (int l, int r) {
//         tree.apply(l, r, x);
//     });
// }

void init(int rt = 1) { 
    par[rt] = depth[rt] = dfs_number = 0; 
    dfs_sz(rt); 
    nxt[rt] = rt; dfs_hld(rt); 
}

"Binary Trie" - "zztrie"

template<
    class Val = long long,   // values stored in Trie
    class Count = long long, // frequency of values
    int B = (sizeof(Val) * 8 - 1)  // max number of bit
> struct BinaryTrie {
    struct Node {
        std::array<int, 2> child;
        Count count;
        Node() : child{-1, -1}, count(0) {}
    };

    BinaryTrie() : nodes{Node()} {} // create root node

    // Number of elements in the trie
    Count size() {
        return nodes[0].count;
    }

    void insert(Val x, Count cnt = 1) {
        update(x, cnt);
    }
    void remove(Val x, Count cnt = 1) {
        update(x, -cnt);
    }

    // return min(X ^ xor_val)
    pair<Val, Node> min_element(Val xor_val = 0) {
        assert(0 < size());
        return kth_element(0, xor_val);
    }

    // return max(X ^ xor_val)
    pair<Val, Node> max_element(Val xor_val = 0) {
        assert(0 < size());
        return kth_element(size() - 1, xor_val);
    }

    // return k-th smallest (X ^ xor_val)  (0 <= K < size())
    pair<Val, Node> kth_element(Count k, Val xor_val = 0) {
        assert(0 <= k && k < size());
        int u = 0;
        Val x = 0;
        for (int i = B - 1; i >= 0; i--) {
            int b = get_bit(xor_val, i);
            int v0 = get_child(u, b);
            if (nodes[v0].count <= k) {
                k -= nodes[v0].count;
                u = get_child(u, 1-b);
                x |= 1LL << i;
            } else {
                u = v0;
            }
        }
        return {x, nodes[u]};
    }

    // return frequency of x
    Count count(Val x) {
        int u = 0;
        for (int i = B - 1; i >= 0; i--) {
            int b = get_bit(x, i);
            if (nodes[u].child[b] == -1) {
                return 0;
            }
            u = get_child(u, b);
        }
        return nodes[u].count;
    }

    // return how many values a where a ^ xor_val < x
    Count count_less_than(Val x, Val xor_val) {
        Count sum = 0;
        int u = 0;
        for (int i = B - 1; i >= 0; --i) {
            int bx = get_bit(x, i);
            int bxor = get_bit(xor_val, i);
            if (bx == 1) {
                // i = first bit where a^xor_val differ from x
                if (nodes[u].child[bxor] >= 0) {
                    sum += nodes[nodes[u].child[bxor]].count;
                }
            }
            if (nodes[u].child[bx ^ bxor] == -1) {
                return sum;
            }
            u = get_child(u, bx ^ bxor);
        }
        return sum;
    }

// private:
    vector<Node> nodes;

    int get_child(int p, int b) {
        assert(0 <= p && p < (int) nodes.size());
        assert(0 <= b && b < 2);
        if (nodes[p].child[b] == -1) {
            nodes[p].child[b] = nodes.size();
            nodes.push_back(Node{});
        }
        return nodes[p].child[b];
    }

    void update(Val x, Count cnt) {
        int u = 0;
        for (int i = B - 1; i >= 0; i--) {
            nodes[u].count += cnt;
            assert(nodes[u].count >= 0);  // prevent over delete
            int b = get_bit(x, i);
            u = get_child(u, b);
        }
        nodes[u].count += cnt;
        assert(nodes[u].count >= 0);  // prevent over delete
    }

    inline int get_bit(Val v, int bit) {
        return (v >> bit) & 1;
    }
};

"Counting" - "zzcount"

const int MAXN = 1e6 + 10;
const int MOD = 1e9 + 7;

ll binpow(ll a, ll n, ll m = MOD) {
    a %= m;
    ll res = 1;

    while (n > 0) {
        if (n & 1) res = res * a % m;
        a = a * a % m;
        n /= 2;
    }
    return res;
}

ll fac[MAXN+1];
ll inv[MAXN+1];

ll nCr(int n, int r) { 
    if (n < r) return 0;
    return fac[n] * inv[r] % MOD * inv[n - r] % MOD; 
}

void _precalc() {
    fac[0] = 1;
	for (int i = 1; i <= MAXN; i++) { 
        fac[i] = fac[i - 1] * i % MOD; 
    }

    inv[MAXN] = binpow(fac[MAXN], MOD - 2, MOD);
	for (int i = MAXN; i >= 1; i--) { 
        inv[i - 1] = inv[i] * i % MOD; 
    }

    REP(i, MAXN-1) {
        phi[i] = i;
    }

    REP(i, MAXN-1) {
        for (int j = 2*i; j < MAXN; j += i) {
            phi[j] -= phi[i];
        }
    }
}

"Hashing" - "zzhash"

struct HashedString {
	static const ll M = 1e9 + 9;
	static const ll B = 9973;

	static vector<ll> pows;
	vector<ll> p_hash;

	HashedString(const string &s) : p_hash(s.size() + 1) {
		while (pows.size() < s.size()) { pows.push_back((pows.back() * B) % M); }

		p_hash[0] = 0;
		for (int i = 0; i < s.size(); i++) {
			p_hash[i + 1] = ((p_hash[i] * B) % M + s[i]) % M;
		}
	}

	// [l, r]
	ll get_hash(int l, int r) {
		ll raw_val = (p_hash[r] - (p_hash[l-1] * pows[r - l + 1]));
		return (raw_val % M + M) % M;
	}

};
vector<ll> HashedString::pows = {1};

"Mo" - "zzmo"

const int BLOCK_SIZE = 750;
struct Query {
    int l, r, idx;

    bool operator<(Query other) const {
        if (l / BLOCK_SIZE != other.l / BLOCK_SIZE) 
            return make_pair(l, r) < make_pair(other.l, other.r);
        return (l / BLOCK_SIZE & 1) ? (r < other.r) : (r > other.r);
    }
};

vector<Query> queries;
vector<int> mo_algorithm() {
    vector<int> answers(queries.size()+1);
    sort(all(queries));

    // TODO: initialize data structure
    int res = 0, cur_l = 1, cur_r = 0;

    auto addL = [&] (int x) {
    };

    auto removeL = [&] (int x) {
    };

    auto addR = [&] (int x) {
    };

    auto removeR = [&] (int x) {
    };

    auto get_answer = [&] () {
    };

    // invariant: data structure will always reflect the range [cur_l, cur_r]
    for (Query &q : queries) {
        while (cur_l > q.l) {
            cur_l--;
            addL(cur_l);
        }
        while (cur_r < q.r) {
            cur_r++;
            addR(cur_r);
        }
        while (cur_l < q.l) {
            removeL(cur_l);
            cur_l++;
        }
        while (cur_r > q.r) {
            removeR(cur_r);
            cur_r--;
        }
        
        answers[q.idx] = get_answer();
    }

    return answers;
}

"Mo Insert" - "zzmoins"

const int MAXN = 5e5 + 10;
const int BLOCK_SIZE = 750;

struct Query {
    int l, r, id;

    bool operator < (Query other) {
        if (l / BLOCK_SIZE == other.l / BLOCK_SIZE) return r < other.r;
        return l / BLOCK_SIZE < other.l / BLOCK_SIZE;
    }
};

struct DS {
    int sum;
    int snapsum;

    void init() {
        sum = snapsum = 0;
    }

    void insert(int x) {
        sum += x;
    }

    void snapshot() {
        snapsum = sum;
    }

    void rollback() {
        sum = snapsum;
        snapsum = 0;
    }
};

int n, Q;
int a[MAXN];

vector<Query> queries;
vector<int> mo_algo() {
    vector<int> ans(queries.size() + 1);

    DS ds;
    ds.init();
    ds.snapshot();
    sort(all(queries));

    for (auto &q : queries) {
        if (q.r - q.l <= BLOCK_SIZE) {
            FOR(i, q.l, q.r) {
                ds.insert(a[i]);
            }
        }

        ans[q.id] = ds.sum;
        ds.rollback();
    }

    int last_bucket = -1;
    int cur_r = 0, border = 0;
    for (auto &q : queries) {
        if (q.r - q.l <= BLOCK_SIZE) continue;
        int bucket = q.l / BLOCK_SIZE;

        if (bucket != last_bucket) {
            ds.init();
            border = (bucket + 1) * BLOCK_SIZE; // right border of the bucket
            cur_r = q.r;

            FOR(i, border, cur_r) {
                ds.insert(a[i]);
            }
        }
        last_bucket = bucket;

        while (cur_r < q.r) {
            cur_r++;
            ds.insert(a[cur_r]);
        }
        ds.snapshot();

        FOR(i, q.l, border - 1) {
            ds.insert(a[i]);
        }

        ans[q.id] = ds.sum;
        ds.rollback();
    }

    return ans;
}

"Ternary Search" - "zzter"

template<class B> ld ternary_search(int lo, int hi, B f) {
	REP(_, 11) {
		int x1 = lo + (hi - lo) / 3;
		int x2 = hi - (hi - lo) / 3;

		if (f(x1) > f(x2)) hi = x2;
		else lo = x1;
	}

	ld res = f(lo);
	FOR(i, lo, hi) ckmax(res, f(i));

	return res;
}

"Trie" - "zztrie"


const int MAXN = 1e6 + 10;

struct Node {
    pair<int, int> child[27];
    int end;
} trie[MAXN];
int timer = 0;

void trie_add(string &s) {
    int x = 0;

    for (char c : s) {
        int id = c - 'a';

        if (trie[x].child[id].first == 0) {
            trie[x].child[id].first = ++timer;
        }

        x = trie[x].child[id].first;
        trie[x].child[id].second++;

        trie[x].end = id;
    }

}

int find_string(string &s) {
    int x = 0;
    for (char c : s) {
        int id = c - 'a';
        if(trie[x].child[id].first == 0) {
            return 0;
        }
        
        x = trie[x].child[id].first;
    }

    return trie[x].child[(s.back() - 'a')].second;
}

"Directed Cycle" - "zzdcyc"
int n;
vector<vector<int>> adj;
vector<char> color;
vector<int> parent;
int cycle_start, cycle_end;

bool dfs(int v) {
    color[v] = 1;
    for (int u : adj[v]) {
        if (color[u] == 0) {
            parent[u] = v;
            if (dfs(u))
                return true;
        } else if (color[u] == 1) {
            cycle_end = v;
            cycle_start = u;
            return true;
        }
    }
    color[v] = 2;
    return false;
}

void find_cycle() {
    color.assign(n, 0);
    parent.assign(n, -1);
    cycle_start = -1;

    for (int v = 0; v < n; v++) {
        if (color[v] == 0 && dfs(v))
            break;
    }

    if (cycle_start == -1) {
        cout << "Acyclic" << endl;
    } else {
        vector<int> cycle;
        cycle.push_back(cycle_start);
        for (int v = cycle_end; v != cycle_start; v = parent[v])
            cycle.push_back(v);
        cycle.push_back(cycle_start);
        reverse(cycle.begin(), cycle.end());

        cout << "Cycle found: ";
        for (int v : cycle)
            cout << v << " ";
        cout << endl;
    }
}

"Cycle" - "zzcyc"
int n;
vector<vector<int>> adj;
vector<bool> visited;
vector<int> parent;
int cycle_start, cycle_end;

bool dfs(int v, int par) { // passing vertex and its parent vertex
    visited[v] = true;
    for (int u : adj[v]) {
        if(u == par) continue; // skipping edge to parent vertex
        if (visited[u]) {
            cycle_end = v;
            cycle_start = u;
            return true;
        }
        parent[u] = v;
        if (dfs(u, parent[u]))
            return true;
    }
    return false;
}

void find_cycle() {
    visited.assign(n, false);
    parent.assign(n, -1);
    cycle_start = -1;

    for (int v = 0; v < n; v++) {
        if (!visited[v] && dfs(v, parent[v]))
            break;
    }

    if (cycle_start == -1) {
        cout << "Acyclic" << endl;
    } else {
        vector<int> cycle;
        cycle.push_back(cycle_start);
        for (int v = cycle_end; v != cycle_start; v = parent[v])
            cycle.push_back(v);
        cycle.push_back(cycle_start);

        cout << "Cycle found: ";
        for (int v : cycle)
            cout << v << " ";
        cout << endl;
    }
}

"Negative Cycle" - "zznegcyc"
struct Edge {
    int a, b, cost;
};

int n, m;
vector<Edge> edges;
const int INF = 1000000000;

void solve()
{
    vector<int> d(n);
    vector<int> p(n, -1);
    int x;
    for (int i = 0; i < n; ++i) {
        x = -1;
        for (Edge e : edges) {
            if(d[e.a] < INF){
                if (d[e.a] + e.cost < d[e.b]) {
                    d[e.b] = max(-INF, d[e.a] + e.cost);
                    p[e.b] = e.a;
                    x = e.b;
                }
            }
        }
    }

    if (x == -1) {
        cout << "No negative cycle found.";
    } else {
        for (int i = 0; i < n; ++i)
            x = p[x];

        vector<int> cycle;
        for (int v = x;; v = p[v]) {
            cycle.push_back(v);
            if (v == x && cycle.size() > 1)
                break;
        }
        reverse(cycle.begin(), cycle.end());

        cout << "Negative cycle: ";
        for (int v : cycle)
            cout << v << ' ';
        cout << endl;
    }
}

"Bridge" - "zzbri"
const int MAXN = 1e5 + 10;

int n, m;
vector<int> g[MAXN];
int tin[MAXN], low[MAXN];

bool vis[MAXN];

vector<pair<int, int>> bridges;

int timer = 0;
void dfs(int u, int p = -1) {
    timer++;
    tin[u] = low[u] = timer;
    vis[u] = 1;

    for (int v : g[u]) {
        if (v == p) continue;

        if (vis[v]) { 
            // back edge
            low[u] = min(low[u], tin[v]);
        } 
        else { 
            dfs(v, u);

            // tree edge
            low[u] = min(low[u], low[v]);

            if (tin[u] < low[v]) {
                bridges.push_back({u, v});
            }
        }
    }
}

void find_bridge() {
    for (int i = 1; i <= n; i++) {
        if (!vis[i]) dfs(i);
    }
}

"Khop" - "zzkhop"

const int MAXN = 2e5 + 10;

vector<int> g[MAXN];
int timer = 0, tin[MAXN], low[MAXN], joint[MAXN];

void dfs(int u, int p = -1) {
    timer++;
    tin[u] = low[u] = timer;
    int child = 0;

    for (int v : g[u]) {
        if (v == p) continue;

        if (tin[v]) low[u] = min(low[u], tin[v]);
        else {
            dfs(v, u);

            low[u] = min(low[u], low[v]);
            child++;

            if (tin[u] <= low[v] && p != -1) {
                joint[u] = 1;
            }
        }
    }

    if (p == -1 && child > 1) joint[u] = 1;
}

void pre() {
    for (int i = 1; i <= n; i++) {
        if (!tin[i]) dfs(i);
    }
}

"Critical Edges" - "zzcri"

struct Edge {
    int u, v, w, id;
    friend bool operator < (Edge &x, Edge &y) {
        return x.w < y.w;
    }
};

Edge E[MAXN];
int ans[MAXN];

void solve() {
    cin >> n >> m;
    REP(i, m) {
        int u, v, w; cin >> u >> v >> w;
        if (u > v) swap(u, v);
        E[i] = {u, v, w, i};
    }

    sort(E+1, E+m+1);
    DSU dsu(n);

    int tol = 0;
    REP(i, m) if (dsu.unite(E[i].u, E[i].v)) tol += E[i].w, add_edge(E[i].u, E[i].v);
    init();

    if (dsu.get_size(1) != n) {
        REP(i, m) cout << -1 << endl;
        return;
    }

    reverse(E+1, E+m+1);
    REP(i, m) {
        int u = E[i].u, v = E[i].v, w = E[i].w;
        if (!isEdge(u, v)) {
            updatePath(u, v, w);
        }
    }

    REP(i, m) {
        int u = E[i].u, v = E[i].v, w = E[i].w;
        if (isEdge(u, v)) {
            int nw = queryPath(u, v);
            if (nw == e()) {
                ans[E[i].id] = -1;
                continue;
            }
            
            ans[E[i].id] = tol - w + nw;
        }
        else ans[E[i].id] = tol;
    }

    REP(i, m) {
        cout << ans[i] << endl;
    }
}

"Kadane" - "zzkadane"

    vector<int> a(n);
    for (int &i : a) cin >> i;
 
    int res = a[0];
    int sum = 0;
    for (int x : a) {
        sum = max(sum + x, x);
        ckmax(res, sum);
    }

"LIS" - "zzlis"

const int inf = 1e9 + 10;

vector<int> lis(vector<int> &a) {
    int n = (int) a.size();
    vector<int> d, trace;
    vector<int> f(n + 1, inf);
    f[0] = -inf;

    int len = 0;
    for(int i = 0; i < n; i++) {
        int k = lower_bound(f.begin(), f.end(), a[i]) - f.begin();
        f[k] = a[i];
        len = max(len, k);
        d.push_back(k);
    }

    while(len) {
        for (int i = n - 1; i >= 0; i--) {
            if(d[i] == len) {
                trace.push_back(i);
                n = i;
                break;
            }
        }
        len--;
    }

    reverse(trace.begin(), trace.end());
	return trace;
}

"LCS" - "zzlcs"

vector<int> lcs(vector<int> &a, vector<int> &b, int m, int n) {
	int L[m + 1][n + 1];

	for (int i = 0; i <= m; i++) {
		for (int j = 0; j <= n; j++) {
			if (i == 0 || j == 0)
				L[i][j] = 0;
			else if (a[i - 1] == b[j - 1])
				L[i][j] = L[i - 1][j - 1] + 1;
			else
				L[i][j] = max(L[i - 1][j], L[i][j - 1]);
		}
	}

	int index = L[m][n];
    vector<int> res;

	int i = m, j = n;
	while (i > 0 && j > 0) {
		if (a[i - 1] == b[j - 1]) {
			res.push_back(a[i-1]);
			i--;
			j--;
			index--;
		}
		else if (L[i - 1][j] > L[i][j - 1])
			i--;
		else
			j--;
	}
    reverse(all(res));

    return res;
}

"Matching" - "zzmt"

int n, k;
vector<vector<int>> g;
vector<int> mt;
vector<bool> used;

bool try_kuhn(int v) {
    if (used[v])
        return false;
    used[v] = true;
    for (int to : g[v]) {
        if (mt[to] == -1 || try_kuhn(mt[to])) {
            mt[to] = v;
            return true;
        }
    }
    return false;
}

int main() {
    //... reading the graph ...

    mt.assign(k, -1);
    for (int v = 0; v < n; ++v) {
        used.assign(n, false);
        try_kuhn(v);
    }

    for (int i = 0; i < k; ++i)
        if (mt[i] != -1)
            printf("%d %d\n", mt[i] + 1, i + 1);
}